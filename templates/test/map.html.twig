<!DOCTYPE html>
<html>
<head>
    <title>Title</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
          integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
          crossorigin=""/>

    <style>


        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
            line-height: 1.4;
            color: #4a4a4a;
        }

        h1, h2, h3, h4, h5, h6 {
            color: #000;
        }

        .item {
            cursor: pointer;
            margin-bottom: 2rem;
            transition: box-shadow .3s;
            padding: 0 20px;
        }

        .item:hover {
            box-shadow: 0 0 10px rgba(0, 0, 0, .1);
            background-color: #fff;
        }

        .item h4 {
            margin: 1rem 0 0.5rem 0;
        }

        .item p {
            margin: 0 0 1rem 0;
        }

        .item img {
            width: calc(100% + 40px);
            margin-left: -20px;
            display: block;
        }

        .map {
            height: 100vh;
        }

        @media only screen and (min-width: 1100px) {

            .container {
                display: grid;
                grid-template-columns: 7fr 4fr;
            }

            .list {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                grid-column-gap: 30px;
                padding: 0 30px;
            }

            .map {
                background-color: #CCCCCC;
                position: sticky!important;
                top: 0;
                right: 0;
                left: 0;
            }
        }

        .marker.leaflet-popup {
            margin-bottom: 16px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            padding: 5px 10px;
            text-align: center;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            background-color: #fff;
        }

        .marker.leaflet-popup::after {
            content:'';
            position: absolute;
            top: 100%;
            left: 50%;
            width: 0;
            height: 0;
            margin-left: -8px;
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-top: 8px solid #FFF;
        }

        .marker .leaflet-popup-content-wrapper {
            background: transparent;
            color: inherit;
            box-shadow: none;
            text-align: inherit;
        }

        .marker .leaflet-popup-content {
            text-align: inherit;
            color: inherit;
            margin: 0;
        }

        .marker .leaflet-popup-tip-container {
            display: none;
        }

        .marker.is-active, .marker:hover {
            z-index:300;
            background-color: #5069ff;
            color: #FFF;
        }

        .marker.is-active::after, .marker:hover::after {
            border-top-color: #5069ff;
        }

        .marker.is-expanded {
            background-color: #fff!important;
            color: inherit!important;
            z-index:301;
            text-align: left;
        }

        .marker.is-expanded::after {
            border-top-color: #FFF!important;
        }



    </style>



</head>
<body>

<h1 style="padding-left: 30px;">Test de  <strong>MERDE</strong></h1>

<div class="container">

    <div class="list">


        {% for farm in farmer %}


            {% if farm.lat is defined and farm.lng %}

                <div class="item js-marker" data-lat="{{ farm.lat }}" data-lng="{{ farm.lng }}" data-price="ICI">
                    {# <img class="img-thumbnail" src="{{ farm.photoProfil }}" alt=""> #}
                    <h4>{{ farm.farmName }}</h4>
                    <p>
                        {{ farm.farmDescription }}
                    </p>
                </div>

            {% endif %}


        {% endfor %}

    </div>

    <div class="map" id="map"></div>

</div>

<script>
    /*!
  * $script.js JS loader & dependency manager
  * https://github.com/ded/script.js
  * (c) Dustin Diaz 2014 | License MIT
  */
    (function(e,t){typeof module!="undefined"&&module.exports?module.exports=t():typeof define=="function"&&define.amd?define(t):this[e]=t()})("$script",function(){function p(e,t){for(var n=0,i=e.length;n<i;++n)if(!t(e[n]))return r;return 1}function d(e,t){p(e,function(e){return t(e),1})}function v(e,t,n){function g(e){return e.call?e():u[e]}function y(){if(!--h){u[o]=1,s&&s();for(var e in f)p(e.split("|"),g)&&!d(f[e],g)&&(f[e]=[])}}e=e[i]?e:[e];var r=t&&t.call,s=r?t:n,o=r?e.join(""):t,h=e.length;return setTimeout(function(){d(e,function t(e,n){if(e===null)return y();!n&&!/^https?:\/\//.test(e)&&c&&(e=e.indexOf(".js")===-1?c+e+".js":c+e);if(l[e])return o&&(a[o]=1),l[e]==2?y():setTimeout(function(){t(e,!0)},0);l[e]=1,o&&(a[o]=1),m(e,y)})},0),v}function m(n,r){var i=e.createElement("script"),u;i.onload=i.onerror=i[o]=function(){if(i[s]&&!/^c|loade/.test(i[s])||u)return;i.onload=i[o]=null,u=1,l[n]=2,r()},i.async=1,i.src=h?n+(n.indexOf("?")===-1?"?":"&")+h:n,t.insertBefore(i,t.lastChild)}var e=document,t=e.getElementsByTagName("head")[0],n="string",r=!1,i="push",s="readyState",o="onreadystatechange",u={},a={},f={},l={},c,h;return v.get=m,v.order=function(e,t,n){(function r(i){i=e.shift(),e.length?v(i,r):v(i,t,n)})()},v.path=function(e){c=e},v.urlArgs=function(e){h=e},v.ready=function(e,t,n){e=e[i]?e:[e];var r=[];return!d(e,function(e){u[e]||r[i](e)})&&p(e,function(e){return u[e]})?t():!function(e){f[e]=f[e]||[],f[e][i](t),n&&n(r)}(e.join("|")),v},v.done=function(e){v([null],e)},v})


    // Production steps of ECMA-262, Edition 6, 22.1.2.1
    if (!Array.from) {
        Array.from = (function () {
            var toStr = Object.prototype.toString;
            var isCallable = function (fn) {
                return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
            };
            var toInteger = function (value) {
                var number = Number(value);
                if (isNaN(number)) { return 0; }
                if (number === 0 || !isFinite(number)) { return number; }
                return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
            };
            var maxSafeInteger = Math.pow(2, 53) - 1;
            var toLength = function (value) {
                var len = toInteger(value);
                return Math.min(Math.max(len, 0), maxSafeInteger);
            };

            // The length property of the from method is 1.
            return function from(arrayLike/*, mapFn, thisArg */) {
                // 1. Let C be the this value.
                var C = this;

                // 2. Let items be ToObject(arrayLike).
                var items = Object(arrayLike);

                // 3. ReturnIfAbrupt(items).
                if (arrayLike == null) {
                    throw new TypeError('Array.from requires an array-like object - not null or undefined');
                }

                // 4. If mapfn is undefined, then let mapping be false.
                var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
                var T;
                if (typeof mapFn !== 'undefined') {
                    // 5. else
                    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
                    if (!isCallable(mapFn)) {
                        throw new TypeError('Array.from: when provided, the second argument must be a function');
                    }

                    // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
                    if (arguments.length > 2) {
                        T = arguments[2];
                    }
                }

                // 10. Let lenValue be Get(items, "length").
                // 11. Let len be ToLength(lenValue).
                var len = toLength(items.length);

                // 13. If IsConstructor(C) is true, then
                // 13. a. Let A be the result of calling the [[Construct]] internal method
                // of C with an argument list containing the single item len.
                // 14. a. Else, Let A be ArrayCreate(len).
                var A = isCallable(C) ? Object(new C(len)) : new Array(len);

                // 16. Let k be 0.
                var k = 0;
                // 17. Repeat, while k < len… (also steps a - h)
                var kValue;
                while (k < len) {
                    kValue = items[k];
                    if (mapFn) {
                        A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
                    } else {
                        A[k] = kValue;
                    }
                    k += 1;
                }
                // 18. Let putStatus be Put(A, "length", len, true).
                A.length = len;
                // 20. Return A.
                return A;
            };
        }());
    }

</script>

<script>

    let $map = document.querySelector('#map')

    class LeafletMap {

        constructor () {
            this.map = null
            this.bounds = []
        }

        async load (element) {
            return new Promise((resolve, reject) => {
                $script(['https://unpkg.com/leaflet@1.3.1/dist/leaflet.js'], () => {
                    this.map = L.map(element, {scrollWheelZoom: false})
                    L.tileLayer('//{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', { //'//api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
                        attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                        accessToken: 'access.KEY',
                        id: 'mapbox.streets'
                    }).addTo(this.map)
                    resolve()
                })
            })
        }

        addMarker (lat, lng, text) {
            let point = [lat, lng]
            this.bounds.push(point)
            return new LeafletMarker(point, text, this.map)
        }

        center () {
            this.map.fitBounds(this.bounds)
        }

    }

    class LeafletMarker {
        constructor (point, text, map) {
            this.text = text
            this.popup = L.popup({
                autoClose: false,
                closeOnEscapeKey: false,
                closeOnClick: false,
                closeButton: false,
                className: 'marker',
                maxWidth: 400
            })
                .setLatLng(point)
                .setContent(text)
                .openOn(map)
        }

        setActive () {
            this.popup.getElement().classList.add('is-active')
        }

        unsetActive () {
            this.popup.getElement().classList.remove('is-active')
        }

        addEventListener (event, cb) {
            this.popup.addEventListener('add', () => {
                this.popup.getElement().addEventListener(event, cb)
            })
        }

        setContent (text) {
            this.popup.setContent(text)
            this.popup.getElement().classList.add('is-expanded')
            this.popup.update()
        }

        resetContent () {
            this.popup.setContent(this.text)
            this.popup.getElement().classList.remove('is-expanded')
            this.popup.update()
        }

    }

    const initMap = async function () {
        let map = new LeafletMap()
        let hoverMarker = null
        let activeMarker = null
        await map.load($map)
        Array.from(document.querySelectorAll('.js-marker')).forEach((item) => {
            let marker = map.addMarker(item.dataset.lat, item.dataset.lng, item.dataset.price + ' >')
            item.addEventListener('mouseover', function () {
                if (hoverMarker !== null) {
                    hoverMarker.unsetActive()
                }
                marker.setActive()
                hoverMarker = marker
            })
            item.addEventListener('mouseleave', function () {
                if (hoverMarker !== null) {
                    hoverMarker.unsetActive()
                }
            })
            marker.addEventListener('click', function () {
                if (activeMarker !== null) {
                    activeMarker.resetContent()
                }
                marker.setContent(item.innerHTML)
                activeMarker = marker
            })
        })
        map.center()
    }

    if ($map !== null) {
        initMap()
    }


</script>


</body>
</html>
